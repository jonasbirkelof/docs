{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to my documentation site an knowledge database. On this site I will collect guides and templates for various services, softwares, and operating systems that I myself find useful, and I hope you will too! I will also publish other information that I find valuable.</p> <ul> <li> <p> Tech</p> <p>Installation instructions, examples, templates and more.</p> <p>Visit</p> </li> <li> <p> Gaming</p> <p>Gaming articles, installation instructions and game servers.</p> <p>Visit</p> </li> <li> <p> Media</p> <p>Movie and TV-series information.</p> <p>Visit</p> </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/12/03/workflows-for-git-branches/","title":"Workflows for Git branches","text":"<p>There are no rules for how to use branches, it's up for you to decide based on your needs and preferences. There are however some ways the industry use branches that makes development easier. </p>"},{"location":"blog/2024/12/03/workflows-for-git-branches/#the-permanent-development-branch","title":"The permanent development branch","text":"<p>Before we visit the better practises, let's first discuss a practise that is not that great. It is common for developers to have a permanent development branch where all development for a new version of the project is pushed to. When the work in the development branch is finished it is merged with the master branch but is not deleted afterwards. All the developers will then pull the development branch and continue from there.</p> <p>The problem with this approach is that when the development branch is merged with the master branch, a commit for the merge is created on the master branch (but not on the development branch). This means that the master branch will always be one commit ahead of the development branch which will make them out of sync. There are ways to solve this but it's not really worth the effort when there are better solutions.</p>"},{"location":"blog/2024/12/03/workflows-for-git-branches/#temporary-development-branches","title":"Temporary development branches","text":"<p>The solution is to use temporary development branches that the developer will push code to when working on a specific feature or issue. When the work is done, the development branch is merged into an upcomming version branch and is then deleted. The upcomming version branch will then be merged into the major version branch or master branch (depending on the use case) and is also then deleted. Any new feature or issue is then developed using new branches that are cloned or forked from the major or upcoming version branch.</p> <p>If you don't want to share the progress to the public, you can <code>fork</code> the branch you want to develop, push to that copy and then make a pull request to the upcomming or major version branch when you are done.</p>"},{"location":"blog/2024/12/03/workflows-for-git-branches/#option-1-version-branches","title":"Option 1: Version branches","text":"<p>Let's say you have an application that is version 2.0.0 that has an older version (1.1.0) that still needs to be maintained with bug fixes. Version 1.x might be needed for older operating systems for instance. This means that you must keep the source code for that version somehow so that you can clone or fork it.</p> <p>By having a branch for every major version of the application called 1.x and 2.x you can clone or fork the version you want to develop at any time without messing with the other version. One developer can work on bug fixes for version 1.x and another can work on a new feature for version 2.x.</p> <p>You do not push anything to the master branch but do not delete it. Do not make changes directly to the upcomming version branch!</p> <p>This kind of workflow can look something like this:</p> <ol> <li> <p>Create a branch called 2.0.1 based on the 2.x branch. This is the upcomming version branch.</p> </li> <li> <p>Create a branch for the new feature or issue you will be working on. Name it feature, issue-001 or something descriptive (not just \"feature\"...).</p> </li> <li> <p>When the feature development is finished, merge the feature branch with the upcomming version branch 2.0.1 and delete the feature branch. </p> </li> <li> <p>When the version 2.0.1 development is finished and is ready to be released, merge the 2.0.1 branch with the 2.x branch and delete the upcomming version branch.</p> </li> <li> <p>Make a new release based on the 2.x branch. </p> </li> <li> <p>The 2.x branch will now contain the latest version of your application and there will be a release for the latest version (2.0.1) where the source code can be downloaded as a zip file.</p> </li> <li> <p>When a new version 2.0.2 is being developed, repeat this process.</p> </li> </ol> <p>An example of a project that uses this workflow is Font Awesome.</p> Branch name Description master Not in use, do not delete! 2.x The latest version of the code (set to default branch). 1.x The latest legacy version of the code. 2.0.1 Upcomming version. Push changes to it, then merge with 2.x, then delete. issue-001 Development for issue 001. Push changes to it, then merge with 2.0.1, then delete. <p>The branch that your visitors will see by default when they visit you repository is the master branch. You will probably want to change this to the latest version branch (2.x). You do that by going to Settings &gt; General &gt; Default branch and select the branch you want to set as default.</p>"},{"location":"blog/2024/12/03/workflows-for-git-branches/#option-2-master-branch","title":"Option 2: Master branch","text":"<p>Let's say you have a website that only has one version which is the one in production. You do not have to maintain legacy versions of the code. In this case you store the production code in the master branch and just like the approach with major version branches, you use temporary branches for the development. </p> <p>You can still use semantic versioning for the code to keep track of progress if you like. On smaller projects, or if you work alone, you can skip the upcomming version branch and create a temporary development branch directly from the master branch and then merge back into the master branch when you are done.</p> <p>Do not make changes directly to the master branch or upcomming version branch!</p> <p>This kind of workflow can look something like this:</p> <ol> <li> <p>Create a branch called 2.0.1 based on the master branch. This is the upcomming version branch.</p> </li> <li> <p>Create a branch for the new feature or issue you will be working on. Name it feature, issue-001 or something descriptive (not just \"feature\"...).</p> </li> <li> <p>When the feature development is finished, merge the feature branch with the upcomming version branch 2.0.1 and delete the feature branch. </p> </li> <li> <p>When the version 2.0.1 development is finished, merge the 2.0.1 branch with the master branch and delete the upcomming version branch.</p> </li> <li> <p>The master branch will now contain the latest version of your website.</p> </li> <li> <p>When a new version is being developed, repeat this process.</p> </li> </ol> <p>Tip</p> <p>On smaller projects, or if you work alone, you can skip the upcomming version branch and create a temporary development branch directly from the master branch and then merge back into the master branch when you are done.</p> <p>An example of a project that uses this workflow is Bootstrap.</p> Branch name Description master Not in use, do not delete! 2.0.1 Upcomming version. Push changes to it, then merge with 2.x, then delete. issue-001 Development for issue 001. Push changes to it, then merge with 2.0.1, then delete."},{"location":"gaming/","title":"Gaming","text":"<p>This is the gaming section.</p> <ul> <li> Minecraft</li> </ul>"},{"location":"media/","title":"Media","text":"<p>This is the media section.</p> <ul> <li> Movies</li> </ul>"},{"location":"media/bleach-movies-episodes/","title":"Bleach Movies and Episodes","text":"<p>his page lists all Bleach episodes and movies and explains which are manga canon, fillers and when in the series to watch the movies.</p>"},{"location":"media/bleach-movies-episodes/#episodes","title":"Episodes","text":""},{"location":"media/bleach-movies-episodes/#manga-canon-episodes","title":"Manga Canon Episodes","text":"<p>1-7, 9-26, 28-31, 34-45, 47-49, 51-63, 110, 112-115, 117-118, 121-123, 125-127, 138-140, 142, 144-145, 150-155, 157-159, 162-167, 191-192, 194-203, 208, 210-212, 215-221, 224-227, 269-273, 275, 277-283, 286, 289, 292-294, 297, 300-302, 306-309, 344, 346, 348-350, 352-354, 356, 358-366</p>"},{"location":"media/bleach-movies-episodes/#mixed-canonfiller-episodes","title":"Mixed Canon/Filler Episodes","text":"<p>8, 27, 32, 46, 109, 111, 116, 119-120, 124, 141, 143, 146, 156, 160-161, 190, 193, 206-207, 209, 222-223, 267-268, 274, 276, 284-285, 288, 290-291, 295-296, 310, 342-343, 345, 347, 351, 357</p>"},{"location":"media/bleach-movies-episodes/#filler-episodes","title":"Filler Episodes","text":"<p>33, 50, 64-108, 128-137, 147-149, 168-189, 204-205, 213-214, 228-266, 287, 298-299, 303-305, 311-341, 355</p>"},{"location":"media/bleach-movies-episodes/#movies","title":"Movies","text":"Movie Watch after episode Bleach: Memories of Nobody (2006) 63 or between 109 and 110 Bleach: The DiamondDust Rebellion (2007) 127 (but before 138) Bleach: Fade to Black (2008) After movie 2 but after episode 219 Bleach: The Hell Verse (2010) Doesn't matter but after episode 299 (you can watch episode 299 and the movie between episodes 272 and 342)"},{"location":"media/naruto-movies-episodes/","title":"Naruto Movies and Episodes","text":"<p>This page lists all Naruto episodes and movies and explains which are manga canon, fillers and when in the series to watch the movies.</p>"},{"location":"media/naruto-movies-episodes/#naruto-episodes","title":"Naruto Episodes","text":""},{"location":"media/naruto-movies-episodes/#manga-canon-episodes","title":"Manga Canon Episodes","text":"<p>1-6, 8, 10-13, 17, 22, 25, 31-36, 42, 48, 50-51, 61-62, 64-65, 67-68, 73, 75-82, 84-96, 107-111, 115-125, 128-129, 132-135</p>"},{"location":"media/naruto-movies-episodes/#mixed-canonfiller-episodes","title":"Mixed Canon/Filler Episodes","text":"<p>7, 9, 14-16, 18-21, 23-24, 27-30, 37-41, 43-47, 49, 52-60, 63, 66, 69-72, 74, 83, 98, 100, 112-114, 126-127, 130-131, 141-142, 220</p>"},{"location":"media/naruto-movies-episodes/#filler-episodes","title":"Filler Episodes","text":"<p>26, 97, 99, 101-106, 136-140, 143-219</p>"},{"location":"media/naruto-movies-episodes/#anime-canon-episodes","title":"Anime Canon Episodes","text":"<p>99</p>"},{"location":"media/naruto-movies-episodes/#movies-order","title":"Movies Order","text":"Movie Watch after episode Naruto the Movie: Ninja Clash in the Land of Snow 101 Naruto the Movie: Legend of the Stone of Gelel 160 Naruto the Movie: Guardians of the Crescent Moon Kingdom 196"},{"location":"media/naruto-movies-episodes/#naruto-shippuden-episodes","title":"Naruto Shippuden Episodes","text":""},{"location":"media/naruto-movies-episodes/#manga-canon-episodes_1","title":"Manga Canon Episodes","text":"<p>20-23, 26-27, 29-44, 46-48, 51-53, 55, 72-88, 113-114, 116-126, 129-143, 152-169, 172-175, 197-212, 214-222, 243-256, 261-270, 272-278, 282-283, 296-302, 321-323, 325-326, 329, 332-337, 339-345, 363-375, 378-384, 387, 391-393, 414-415, 418, 420-421, 424-425, 459, 463, 470, 473-477, 484-500</p>"},{"location":"media/naruto-movies-episodes/#mixed-canonfiller-episodes_1","title":"Mixed Canon/Filler Episodes","text":"<p>1-19, 24-25, 45, 49-50, 54, 56, 89-90, 115, 127-128, 213, 324, 327-328, 330-331, 338, 346, 362, 385-386, 419, 426, 451-458, 460-462, 471-472, 478-479</p>"},{"location":"media/naruto-movies-episodes/#filler-episodes_1","title":"Filler Episodes","text":"<p>57-71, 91-112, 144-151, 170-171, 176-196, 223-242, 257-260, 271, 279-281, 284-295, 303-320, 347-361, 376-377, 388-390, 394-413, 416-417, 422-423, 427-450, 464-469, 480-483</p>"},{"location":"media/naruto-movies-episodes/#anime-canon-episodes_1","title":"Anime Canon Episodes","text":"<p>28</p>"},{"location":"media/naruto-movies-episodes/#movies-order_1","title":"Movies Order","text":"Movie Watch after episode Naruto Shippuden the Movie 32 Naruto Shippuden the Movie: Bonds 53 Naruto Shippuden the Movie: The Will of Fire 196 Naruto Shippuden the Movie: The Lost Tower 135 Naruto Shippuden the Movie: Blood Prison 176 Road to Ninja: Naruto the Movie 311 The Last: Naruto the Movie 493 Boruto: Naruto the Movie 500"},{"location":"tech/","title":"Tech","text":"<p>This is the tech section.</p> <ul> <li> Linux</li> <li> Ubuntu</li> <li> Windows</li> <li> Docker</li> </ul>"},{"location":"tech/allow-root-ssh/","title":"Allow SSH Login as Root User","text":"<p>This page will explain how to allow the root user to login via SSH.</p> <p>Warning</p> <p>This feature is disabled by default for security reasons.</p> <ol> <li> <p>Open the SSH configuration file on your server:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> </li> <li> <p>Look for the line that says <code>PermitRootLogin</code> and remove the comment <code>#</code>.</p> </li> <li> <p>By default, the value of <code>PermitRootLogin</code> is often set to <code>prohibit-password</code> or <code>no</code>. Change it to <code>yes</code> if you want to allow root login:</p> sshd_config<pre><code>PermitRootLogin yes\n</code></pre> </li> <li> <p>Restart the SSH Service to apply the changes:</p> <pre><code>sudo systemctl restart sshd\n</code></pre> </li> </ol>"},{"location":"tech/change-wsl2-password/","title":"Change WSL2 Password","text":"<p>If you have forgotten your WSL2 password, this is how you change it.</p> <ol> <li>Open the terminal.</li> <li> <p>Run <code>wsl -l</code> to see all distros and find the one you want to reset the password for. For example, we want to reset the password for user <code>usr001</code> in the distro <code>ubuntu-20.04</code>.</p> <pre><code>wsl -l\n</code></pre> </li> <li> <p>Set default user to root. You must remove all <code>-</code>, <code>.</code> and <code>whitespaces</code> from the distro name.</p> <pre><code>ubuntu2004 config --default-user root\n</code></pre> </li> <li> <p>Open WSL2 and select a new password.</p> <pre><code>passwd usr001\n</code></pre> </li> <li> <p>Open the terminal again and set <code>usr001</code> as the default user.</p> <pre><code>ubuntu2004 config --default-user usr001\n</code></pre> </li> </ol>"},{"location":"tech/firefox-backspace/","title":"Firefox backspace","text":"<p>Follow this guide if you want to use the Backspace button in Firefox to go back to previous page.</p> <ol> <li> <p>Open Firefox.</p> </li> <li> <p>In the address bar, type <code>about:config</code>.</p> </li> <li> <p>Search for <code>browser.backspace_action</code> and edit the value to <code>0</code>.</p> </li> </ol>"},{"location":"tech/install-docker-on-ubuntu/","title":"Install Docker on Ubuntu","text":"<p>This page will explain how to install Docker on Ubuntu. The following steps are taken from the official Docker website.</p> <ol> <li> <p>Use SSH to connect to the Ubuntu server.</p> </li> <li> <p>Add Docker's official GPG key.</p> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> </li> <li> <p>Add the repository to Apt sources.</p> <pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> </li> <li> <p>Install the latest version of Docker and additional packages.</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> </li> </ol> <p>To not have to type <code>sudo</code> before every docker command, run this script and change <code>&lt;USERNAME&gt;</code> to your username:</p> <pre><code>sudo usermod -aG docker &lt;USERNAME&gt;\n</code></pre> <p>Log out using <code>logout</code> and log in again for the changes to take effect.</p>"},{"location":"tech/material-for-mkdocs/","title":"Material for MkDocs","text":"<p>Material for MkDocs is a documentation framework made for MkDocs and is build with Python. It offers a lot of functionallity and customization to you project as well as easy deployment to Docker, GitHub Pages and GitLab Pages.</p>"},{"location":"tech/material-for-mkdocs/#resources","title":"Resources","text":"<ul> <li>Material for MkDocs documentation</li> </ul>"},{"location":"tech/material-for-mkdocs/#prerequisites","title":"Prerequisites","text":"<p>You need have Python and Pip installed.</p>"},{"location":"tech/material-for-mkdocs/#installation","title":"Installation","text":"<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"tech/material-for-mkdocs/#docker","title":"Docker","text":"<p>If you want to develop or deploy the site using Docker, please follow these instructions on how to do that.</p>"},{"location":"tech/material-for-mkdocs/#file-structure","title":"File structure","text":"<p>The file structure of a MkDocs site will look like this with the <code>docs/</code> folder containing all of your site data and in the root you will have your config file <code>mkdocs.yml</code>, <code>README</code> and <code>.github/</code> folder (for workflows).</p> <pre><code>my-site/\n\u251c\u2500 .github/\n\u2502  \u2514\u2500 workflows/\n\u2502     \u2514\u2500 ci.yml\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 assets/\n\u2502  \u2502  \u251c\u2500 images/\n\u2502  \u2502  \u2502  \u251c\u2500 favicon.ico\n\u2502  \u2502  \u2502  \u2514\u2500 logo.svg\n\u2502  \u2502  \u2514\u2500 stylesheets/\n\u2502  \u2502     \u2514\u2500 custom.css\n\u2502  \u251c\u2500 overrides/\n\u2502  \u2502  \u2514\u2500 partials/\n\u2502  \u2502     \u2514\u2500 logo.html\n\u2502  \u251c\u2500 CNAME\n\u2502  \u2514\u2500 index.md\n\u251c\u2500 .gitignore\n\u251c\u2500 mkdocs.yml\n\u2514\u2500 README.md\n</code></pre>"},{"location":"tech/material-for-mkdocs/#create-a-new-project","title":"Create a new project","text":"<p>By running the <code>mkdocs new</code> command, a project folder will be created with the <code>mkdocs.yml</code> config file and default <code>index.md</code> file. <code>cd</code> into the folder where you want to place your project folder and then run the commant below to create a project named <code>my-project</code>.</p> <pre><code>mkdocs new my-project\n</code></pre> <pre><code>my-site/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>The following code is required for the site to work properly. Add it to <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>site_name: My Site\nsite_url: https://mydomain.org/mysite\ntheme:\n  name: material\n</code></pre> <p>You can now test your new site by running <code>mkdocs serve</code>:</p> <pre><code>mkdocs serve\n</code></pre> <p>Open the local instance on http://localhost:8000/.</p> <p>Refer to the Material for MkDocs documentation for setup and usage.</p>"},{"location":"tech/material-for-mkdocs/#deploy-to-github-pages","title":"Deploy to GitHub Pages","text":"<p>You can deploy Material for MkDocs in a couple of ways, but these instructions will explain how to deploy to GitHub Pages.</p>"},{"location":"tech/material-for-mkdocs/#create-the-workflow","title":"Create the workflow","text":"<p>Create a workflow file that will be executed automatically. The file <code>ci.yml</code> must be placed in <code>/.github/workflows/</code>.</p> <pre><code>my-site/\n\u2514\u2500 .github/\n   \u2514\u2500 workflows/\n      \u2514\u2500 ci.yml\n</code></pre> <p>Add the following code to <code>ci.yml</code>:</p> ci.yml<pre><code>name: ci \non:\n  push:\n    branches:\n      - master\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre> <p>If you use plugins they must be installed together with MkDocs. Add them at the bottom of <code>ci.yml</code>:</p> ci.yml<pre><code>jobs:\n  deploy:\n    steps:\n      - run: pip install mkdocs-material \n      - run: pip install mkdocs-glightbox\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"tech/material-for-mkdocs/#gitignore","title":".gitignore","text":"<p>If you have built your site into html and don't want to push that to your repo, you can add this line to you <code>.gitignore</code>:</p> .gitignore<pre><code>/site\n</code></pre>"},{"location":"tech/material-for-mkdocs/#make-a-github-repository","title":"Make a GitHub repository","text":"<p>Depending on how you want to access your website the repository name will differ. Your free GitHub Pages site will always start with the URL <code>&lt;USERNAME&gt;.github.io</code> and the site can be put in either that main site or in a subdomain like <code>&lt;USERNAME&gt;.github.io/docs</code>.</p> <ul> <li> <p>If you want to use the main site, create a repository called <code>&lt;USERNAME&gt;.github.io</code>. The URL to your site will be <code>https://username.github.io</code>.</p> <p>Clone the repo:</p> <pre><code>clone https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io\n</code></pre> </li> <li> <p>If you want to use a subdomain, create a repository called whatever you like, for example: <code>docs</code>. The URL to your site will be <code>https://username.github.io/docs</code>.</p> <p>Clone the repo:</p> <pre><code>clone https://github.com/&lt;USERNAME&gt;/docs\n</code></pre> </li> </ul>"},{"location":"tech/material-for-mkdocs/#push-your-code-to-github","title":"Push your code to GitHub","text":"<p>Copy the files from your local development site that you have built and place it in the local repo.</p> <p>Push your code to GitHub.</p> <pre><code>git add .\ngit commit -m 'Initial commit'\ngit push\n</code></pre> <p>Now your site will be built and deployed to GitHub Pages using GitHub Actions. It might take a minute for the site to be accessible after deployment.</p> <p>Go to the repository Settings and Pages. Chose to deploy Pages from a branch and select <code>gh-pages</code>.</p> <p></p>"},{"location":"tech/material-for-mkdocs/#custom-domain","title":"Custom domain","text":"<p>If you use a custom domain for your GitHup Page, then you must include a <code>CNAME</code> file with your project. Otherwise the custom domain setting on GitHub will be overwritten when you deploy your site.</p> <p>Create a file called <code>CNAME</code> (no extension) in your <code>my-site/docs/</code> folder with your content.</p> CNAME<pre><code>example.com\n</code></pre> <p>This will set the custom domain field every time you run the action workflow when you push a new version of your site.</p>"},{"location":"tech/mkdocs/","title":"MkDocs","text":"<p>If you want to develop a MkDocs site locally, you need to install some dependencies first: Ruby, Python and Pip. This page will explain how to install these dependencies and then how to install MkDocs. </p> <p>Warning</p> <p>Do not follow the instructions on the MkDocs page! Instead, follow the instructions for installing Jekyll on Windows. The Jekyll site offers an easier way of accomplishing just about the same thing as the MkDocs site.</p>"},{"location":"tech/mkdocs/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>While you can use \"vanilla\" MkDocs for documentation, it's much recommended that you use Material for MkDocs instead as this is a really good MkDocs theme that will make a much better site and user experience. If you do, you don't need to proceed with this guide. Use my Material for MkDocs guide for instructions on installation and basic configuration.</p>"},{"location":"tech/mkdocs/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> </ul>"},{"location":"tech/mkdocs/#prerequisites","title":"Prerequisites","text":"<p>Before you can install MkDocs you have to install Python, Pip and Ruby+Devkit.</p>"},{"location":"tech/mkdocs/#python-and-pip","title":"Python and Pip","text":"<p>Follow this guide for instructions on how to install Python and Pip.</p>"},{"location":"tech/mkdocs/#rubydevkit","title":"Ruby+Devkit","text":"<ol> <li> <p>Download Ruby+Devkit from RubyInstaller Downloads.</p> </li> <li> <p>Run the installation file and follow the instructions. Use default options.</p> <p>Important</p> <p>On the last stage of the installation wizard, run the ridk install step. This is needed for installing gems with native extensions. You can find additional information regarding this in the RubyInstaller Documentation.</p> <p>Select <code>MSYS2 and MINGW development tool chain</code>.</p> </li> <li> <p>Open a new command prompt window from the start menu, so that changes to the <code>PATH</code> environment variable becomes effective</p> </li> <li> <p>Install Jekyll and Bundler.</p> <pre><code>gem install jekyll bundler\n</code></pre> </li> <li> <p>Check if Jekyll has been installed properly.</p> <pre><code>jekyll -v\n</code></pre> </li> </ol> <p>Info</p> <p>You may receive an error when checking if Jekyll has not been installed properly. Reboot your system and run <code>jekyll -v</code> again. If the error persists, please open a RubyInstaller issue.</p>"},{"location":"tech/mkdocs/#install-mkdocs","title":"Install MkDocs","text":"<p>Install MkDocs globally:</p> <pre><code>pip install mkdocs\n</code></pre> <p>Check that MkDocs has been installed:</p> <pre><code>mkdocs --version\n</code></pre>"},{"location":"tech/mount-windows-drive/","title":"Mount a Windows Drive","text":"<p>This page explains how to mount a shared folder on Windows to Linux. Make sure that the folder you want to share from the PC is shared before you proceed.</p>"},{"location":"tech/mount-windows-drive/#persisting-mount","title":"Persisting mount","text":"<ol> <li> <p>Create a directory where the drive will be mounted, for example in root <code>/</code> or in <code>/mnt</code>.</p> <pre><code>cd /\n</code></pre> <pre><code>sudo mkdir Media\n</code></pre> </li> <li> <p>Open fstab:</p> <pre><code>sudo nano /etc/fstab\n</code></pre> </li> <li> <p>Add the following at the bottom of the file.</p> <pre><code>//&lt;IP&gt;/&lt;SHARE/FOLDER_NAME&gt; &lt;MOUNT_FOLDER&gt; &lt;SHARE_TYPE&gt; username=&lt;USERNAME&gt;,password=&lt;PASSWORD&gt; 0 0\n</code></pre> <ul> <li>Change <code>&lt;IP&gt;/&lt;SHARE/FOLDER_NAME&gt;</code> to the path of your shared folder that you want to mount. If you use a share on e.g. TrueNAS, you put the name of the share.</li> <li>Change <code>&lt;MOUNT_FOLDER&gt;</code> to the path of the folder you created earlier.</li> <li>Change <code>&lt;SHARE_TYPE&gt;</code> to the chare type.</li> <li>Change <code>&lt;USERNAME&gt;</code> and <code>&lt;PASSWORD&gt;</code> to the credentials nedded to access the shared folder. It can be the Windows user account credentials or the user credentials for the network share.</li> <li>The two <code>0</code>'s at the and should always be present and means that the mount should not be becked up and that it should not be checked by <code>fscheck</code> (filesystem check) since it does not handle wetwork shares anyway.</li> </ul> Example<pre><code>//192.168.1.1/Media /Media cifs username=user,password=password 0 0\n</code></pre> </li> <li> <p>Save the file and exit. Now the folder will be mounted when the VM boots.</p> </li> <li> <p>Check if the mount worked by <code>cd</code> into the directory and run <code>ls</code>:</p> <pre><code>cd /Media\n</code></pre> <pre><code>ls\n</code></pre> </li> <li> <p>Restart the VM for the changes to take effect.</p> <pre><code>sudo reboot\n</code></pre> <p>Tip</p> <p>You can run <code>sudo mount -a</code> if you want to reload the mounts withoud rebooting.</p> </li> </ol>"},{"location":"tech/mount-windows-drive/#non-persisting-mount","title":"Non-persisting mount","text":"<p>This method is not recommended in most cases.</p> <ol> <li> <p>Create a directory for the mounted drive.</p> <pre><code>sudo mkdir -p /mnt/shared_folder\n</code></pre> </li> <li> <p>Mount the drive.</p> <pre><code>sudo mount -t cifs -o username=your_username,password=your_password //remote-pc-ip/shared_folder /mnt/shared_folder\n</code></pre> <ul> <li>Change <code>your_username</code> and <code>your_password</code> to the Microsoft account credentials.</li> <li> <p>Change <code>//remote-pc-ip/shared_folder</code> to the path to the shared folder. </p> <p>Example: share the whole <code>E:</code> drive named <code>Plex media</code> from a PC with IP <code>192.168.1.100</code>. The path to that drive is <code>//192.168.1.100/'Plex media'</code>.</p> </li> <li> <p>Change <code>/mnt/shared_folder</code> to the path of the target folder you created before.</p> </li> </ul> </li> </ol>"},{"location":"tech/mount-windows-folder-to-container/","title":"Mount a Windows folder to a Docker Container","text":"<p>If you have to access files, like config files, and make changes to them in production, you will have to mount the local folder directly to the Docker container. This is however not recommended if it can be avoided due to security reasons.</p> <p>In this example we mount the folder <code>C:\\app_data\\</code> to the container.</p> <pre><code>---\nservices:\n  app:\n    volumes:\n      - '/c/app_data:/data'\n</code></pre> <p>Just be aware that the folder <code>C:\\app_data</code> is now being used live and is read by the Docker container. It is better to avoid this usecase if it's possible!</p>"},{"location":"tech/python/","title":"Python","text":"<p>This page will explain how to install Python and Pip.</p>"},{"location":"tech/python/#resources","title":"Resources","text":"<ul> <li>Python Download</li> </ul>"},{"location":"tech/python/#installation","title":"Installation","text":"<p>Check if Python and Pip is already installed on your system. If they are already installed you can skip to installing MkDocs.</p> <pre><code>python --version\n</code></pre> <pre><code>pip --version\n</code></pre>"},{"location":"tech/python/#windows","title":"Windows","text":"<p>Go to the Python Download page and download the installer.</p> <ol> <li> <p>Choose the latest version and click the Download link.</p> </li> <li> <p>Scroll down to the Files section.</p> </li> <li> <p>Click the Windows installer (64-bit) link and the download starts.</p> </li> <li> <p>Run the installer.</p> <p>Important</p> <p>Check the box Add python.exe to PATH.</p> <p></p> </li> <li> <p>Pip should come with the installation of Python but you can check this by running <code>pip --version</code> and if you get a version number as response, Pip is installed and you can skip to the next secion.</p> <pre><code>pip --version\n</code></pre> </li> </ol>"},{"location":"tech/python/#linux","title":"Linux","text":"<p>Comming soon...</p>"},{"location":"tech/remove-edge-from-taskbar/","title":"Remove Edge From the Taskbar","text":"<p>If Microsoft Edge is automaticlly pinned to the taskbar after rebooting the PC, even after removing it, try these steps.</p>"},{"location":"tech/remove-edge-from-taskbar/#disable-startup","title":"Disable startup","text":"<ol> <li> <p>Open Task Manager by right clicking on the start menu icon in the taskbar or by using the key combination Ctrl+Shift+Esc.</p> </li> <li> <p>Open the Startup tab.</p> </li> <li> <p>Right click on Microsoft Edge and select Deactivate.</p> </li> </ol> <p>Reboot your PC.</p>"},{"location":"tech/remove-edge-from-taskbar/#edit-layout-modification","title":"Edit Layout Modification","text":"<ol> <li> <p>Open the file:</p> <p><code>%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Shell\\LayoutModification.xml</code></p> </li> <li> <p>Search for the following line of code and delete it:</p> LayoutModification.xml<pre><code>&lt;taskbar:UWA AppUserModelID=\"Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge\" /&gt;\n</code></pre> </li> <li> <p>Save and close the file.</p> </li> </ol> <p>Reboot your PC.</p>"},{"location":"tech/reset-root-password/","title":"Reset Linux Root Password","text":"<p>This page will explain how you reset the root user password if you have lost it.</p> <p>Log in with your user account. Open a terminal and run:</p> <pre><code>sudo passwd root\n</code></pre> <p>You'll be prompted to enter a new password for the root account.</p>"},{"location":"tech/set-static-ip/","title":"Set a Static IP","text":"<p>This page will explain how to set a static IP in Linux.</p> <ol> <li> <p>Get the network adaptor</p> <pre><code>ip link\n</code></pre> <p>Find the adaptor named <code>ethx</code>, <code>ensx</code> or something similar.</p> </li> <li> <p>Get IP and subnet mask (and more). Use the adaptor from the previous step, for example <code>eth0</code>.</p> <pre><code>nmcli dev show eth0\n</code></pre> <pre><code>ifconfig eth0\n</code></pre> </li> <li> <p><code>cd</code> into <code>/etc/netplan</code> and run <code>ls</code> to see the config files. </p> <pre><code>cd /etc/netplan\nls\n</code></pre> </li> <li> <p>Open the file named <code>01-netcfg.yaml</code> (or something similar) using nano as root user:</p> <pre><code>sudo nano 01-netcfg.yaml\n</code></pre> 01-netcfg.yml<pre><code>network:\nversion: 2\nethernets:\n    eth0:\n    dhcp4: no\n    addresses:\n        - 192.168.1.100/24\n    gateway4: 192.168.1.1\n    nameservers:\n        addresses:\n        - 8.8.8.8\n        - 1.1.1.1\n</code></pre> <ul> <li>Change the address <code>192.168.1.100/24</code> to the desired IP.</li> <li>Change <code>eth0</code> to the name of your network adaptor.</li> </ul> </li> <li> <p>Apply the changes:</p> <pre><code>sudo netplan apply\n</code></pre> </li> <li> <p>Check if it worked:</p> <pre><code>ip addr show eth0\n</code></pre> </li> </ol>"},{"location":"tech/starship/","title":"Starship","text":"<p>Starship lets you custimize you command line tool with icons, colors, fonts and more. Starship works well together with Windows Terminal.</p> <ul> <li>Official website: https://starship.rs</li> <li>Tutorial by Christian Lempa: https://www.youtube.com/watch?v=AK2JE2YsKto</li> </ul>"},{"location":"tech/starship/#install-windows-terminal","title":"Install Windows Terminal","text":"<p>Download and install Windows Terminal.</p> <pre><code>winget install --id Microsoft.WindowsTerminal -e\n</code></pre>"},{"location":"tech/starship/#install-a-nerd-font","title":"Install a Nerd Font","text":"<p>To display symbols correctly, we need to install a \"Nerd Font\", for instance JetBrainsMono Nerd Font. </p> <p>Install it just like a normal font and set it as default in Windows Terminal. Refer to the configuration documentation for an example config file.</p> settings.json<pre><code>{\n    \"profiles\": \n    {\n        \"defaults\": \n        {\n            \"font\": \n            {\n                \"face\": \"JetBrainsMonoNL Nerd Font\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tech/starship/#install-starship","title":"Install Starship","text":"<p>Install Starship using <code>winget</code>.</p> <pre><code>winget install starship\n</code></pre>"},{"location":"tech/starship/#configure-starship","title":"Configure Starship","text":"<p>Create the file <code>C:\\Users\\&lt;USERNAME&gt;\\.config\\starship.toml</code>.</p> starship.toml example <pre><code>add_newline = true\ncommand_timeout = 1000\nformat = \"\"\"$os$username$hostname$kubernetes$directory$git_branch$git_status\n$character\"\"\"\n\n# Drop ugly default prompt characters\n[character]\n# success_symbol = ''\nsuccess_symbol = '[\u279c](bold green)'\nerror_symbol = ''\n\n# ---\n\n[os]\nformat = '[$symbol](bold white) '   \ndisabled = false\n\n[os.symbols]\nWindows = '\ue62a'\nArch = '\udb82\udcc7'\nUbuntu = '\uf31b'\nMacos = '\udb80\udc35'\n\n# ---\n\n# Shows the username\n[username]\nstyle_user = 'white bold'\nstyle_root = 'black bold'\nformat = '[$user]($style) '\ndisabled = false\nshow_always = true\n\n# Shows the hostname\n[hostname]\nssh_only = false\nformat = '\u279c [$hostname](bold yellow) '\ndisabled = false\n\n# Shows current directory\n[directory]\ntruncation_length = 5\ntruncation_symbol = '\u2026/'\nhome_symbol = '\udb80\udedc ~'\nread_only_style = '197'\nread_only = ' \uf023 '\nformat = 'at [$path]($style)[$read_only]($read_only_style) '\n\n# Shows current git branch\n[git_branch]\nsymbol = '\uf1d2 '\nformat = 'via [$symbol$branch]($style)'\n# truncation_length = 4\ntruncation_symbol = '\u2026/'\nstyle = 'bold green'\n\n# Shows current git status\n[git_status]\nformat = '[$all_status$ahead_behind]($style) '\nstyle = 'bold green'\nconflicted = '\ud83c\udff3'\nup_to_date = ''\nuntracked = '\uf529 '\nahead = '\u21e1${count}'\ndiverged = '\u21d5\u21e1${ahead_count}\u21e3${behind_count}'\nbehind = '\u21e3${count}'\nstashed = '\uf8d6 '\nmodified = '\uf044 '\nstaged = '[++\\($count\\)](green)'\nrenamed = '\u8941 '\ndeleted = '\uf014 '\n\n# Shows kubernetes context and namespace\n[kubernetes]\nformat = 'via [\udb84\udcfe $context\\($namespace\\)](bold purple) '\ndisabled = false\n\n# ---\n\n[vagrant]\ndisabled = true\n\n[docker_context]\ndisabled = true\n\n[helm]\ndisabled = true\n\n[python]\ndisabled = true\n\n[nodejs]\ndisabled = true\n\n[ruby]\ndisabled = true\n\n[terraform]\ndisabled = true\n</code></pre> <p>Download the starship.toml example file.</p>"},{"location":"tech/starship/#initialize-starship","title":"Initialize Starship","text":""},{"location":"tech/starship/#bash","title":"Bash","text":"<ol> <li> <p>Open Bash and type the following to reveal the path to the config file. In should be the user root directory <code>C:\\Users\\&lt;USERNAME&gt;</code>.</p> <pre><code>echo ~\n</code></pre> </li> <li> <p>Navigate to that folder and create the file <code>.bash_profile</code>.</p> <pre><code>cd c:\\Users\\&lt;USERNAME&gt;\n</code></pre> <pre><code>nano .bash_profile\n</code></pre> </li> <li> <p>Add this code at the bottom of the file:</p> .bash_profile<pre><code>eval \"$(starship init bash)\"\n</code></pre> </li> <li> <p>In Windows Terminal <code>settings.json</code>, add the following code under <code>profiles</code>:</p> settings.json<pre><code>\"list\":\n[\n    {\n        \"commandline\": \"%PROGRAMFILES%/Git/bin/bash.exe -i -l\",\n        \"guid\": \"{1fc853bf-83b3-4555-9230-8b010466f547}\",\n        \"hidden\": false,\n        \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-git-100-white.png\",\n        \"name\": \"Git Bash\",\n        \"startingDirectory\" : \"%USERPROFILE%\"\n    }\n]\n</code></pre> <p>The <code>icon</code> property is optional.</p> </li> </ol>"},{"location":"tech/starship/#command-prompt-cmd","title":"Command Prompt (cmd)","text":"<ol> <li> <p>Install Clink.</p> <pre><code>winget install clink\n</code></pre> </li> <li> <p>Open the scripts directory <code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\clink</code>.  Read more about file locations on the documentation page if you experienses problems.</p> </li> <li> <p>Create the file <code>starship.lua</code> and add the following code:</p> starship.lua<pre><code>load(io.popen('starship init cmd'):read(\"*a\"))()\n</code></pre> </li> </ol>"},{"location":"tech/starship/#powershell","title":"PowerShell","text":"<ol> <li> <p>Open a PowerShell prompt and open the profile file in VS Code.</p> <pre><code>code $PROFILE\n</code></pre> </li> <li> <p>Add the following code.</p> Microsoft.PowerShell_profile.ps1<pre><code>Invoke-Expression (&amp;starship init powershell)\n</code></pre> </li> </ol>"},{"location":"tech/test/","title":"Test","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p> <p>Inline <code>code</code> block.</p> Terminal<pre><code>cd /mnt\nmkdir Media\n</code></pre> <ol> <li> <p>Diam sollicitudin lacus.</p> </li> <li> <p>Potenti consectetur.</p> <p>Lacinia scelerisque posuere montes proin malesuada condimentum suspendisse. Mus quam nulla ultrices litora cum dignissim ipsum. Fermentum aliquam orci potenti id mollis feugiat nec.</p> </li> <li> <p>Imperdiet pellentesque.</p> <p>Litora dignissim egestas ultrices elit inceptos lacinia.</p> </li> </ol>"},{"location":"tech/test/#heading-2","title":"Heading 2","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p>"},{"location":"tech/test/#heading-3","title":"Heading 3","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p>"},{"location":"tech/test/#heading-4","title":"Heading 4","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p>"},{"location":"tech/test/#heading-5","title":"Heading 5","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p>"},{"location":"tech/test/#heading-6","title":"Heading 6","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ante integer est ornare odio hac fringilla torquent curabitur. Porta ultrices ipsum viverra lobortis nisi phasellus placerat mattis.</p>"},{"location":"tech/windows-terminal/","title":"Windows Terminal","text":"<p>This page will explain how to install Windows Terminal. You can download Windows Terminal using either winget or by downloading the binary from the GitHub page.</p>"},{"location":"tech/windows-terminal/#winget-installation","title":"Winget installation","text":"<p>Run this command to install:</p> <pre><code>winget install --id Microsoft.WindowsTerminal -e\n</code></pre> <p>The installation command is also used for updating Windows Terminal.</p>"},{"location":"tech/windows-terminal/#manual-installation","title":"Manual installation","text":"<ol> <li> <p>Go to the GitHub releases page.</p> </li> <li> <p>Click on Assets.</p> </li> <li> <p>Download the .msixbundle file.</p> </li> <li> <p>Double click on the .msixbundle file you just downloaded to install.</p> </li> </ol>"},{"location":"tech/windows-terminal/#configuration","title":"Configuration","text":"<p>You can navigate to Settings via the tab menu or by pressing Ctrl+, . Here you can make the settings you want for Windows Terminal och you can click on Open JSON file at the bottom left to open the settings.json file.</p> settings.json example <pre><code>{\n    \"$help\": \"https://aka.ms/terminal-documentation\",\n    \"$schema\": \"https://aka.ms/terminal-profiles-schema\",\n    \"actions\": \n    [\n        {\n            \"command\": \n            {\n                \"action\": \"copy\",\n                \"singleLine\": false\n            },\n            \"keys\": \"ctrl+c\"\n        },\n        {\n            \"command\": \"paste\",\n            \"keys\": \"ctrl+v\"\n        },\n        {\n            \"command\": \n            {\n                \"action\": \"splitPane\",\n                \"split\": \"auto\",\n                \"splitMode\": \"duplicate\"\n            },\n            \"keys\": \"alt+shift+d\"\n        },\n        {\n            \"command\": \"find\",\n            \"keys\": \"ctrl+shift+f\"\n        }\n    ],\n    \"copyFormatting\": \"none\",\n    \"copyOnSelect\": false,\n    \"defaultProfile\": \"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\",\n    \"firstWindowPreference\": \"defaultProfile\",\n    \"newTabMenu\": \n    [\n        {\n            \"type\": \"remainingProfiles\"\n        }\n    ],\n    \"profiles\": \n    {\n        \"defaults\": \n        {\n            \"colorScheme\": \"Tango Dark\",\n            \"font\": \n            {\n                \"face\": \"JetBrainsMonoNL Nerd Font\"\n            },\n            \"opacity\": 85,\n            \"useAcrylic\": false\n        },\n        \"list\": \n        [\n            {\n                \"commandline\": \"%SystemRoot%\\\\System32\\\\cmd.exe\",\n                \"experimental.retroTerminalEffect\": false,\n                \"guid\": \"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\",\n                \"hidden\": false,\n                \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-windows-90.png\",\n                \"name\": \"Command Prompt\"\n            },\n            {\n                \"background\": \"#012456\",\n                \"commandline\": \"%SystemRoot%\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n                \"guid\": \"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\",\n                \"hidden\": false,\n                \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-powershell-100-blue.png\",\n                \"name\": \"Windows PowerShell\"\n            },\n            {\n                \"background\": \"#012456\",\n                \"guid\": \"{574e775e-4f2a-5b96-ac1e-a2962a402336}\",\n                \"hidden\": false,\n                \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-powershell-100-white.png\",\n                \"name\": \"PowerShell v.7\",\n                \"source\": \"Windows.Terminal.PowershellCore\"\n            },\n            {\n                \"commandline\": \"%PROGRAMFILES%/Git/bin/bash.exe -i -l\",\n                \"guid\": \"{1fc853bf-83b3-4555-9230-8b010466f547}\",\n                \"hidden\": false,\n                \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-git-100-white.png\",\n                \"name\": \"Git Bash\",\n                \"startingDirectory\": \"%USERPROFILE%\"\n            },\n            {\n                \"guid\": \"{51855cb2-8cce-5362-8f54-464b92b32386}\",\n                \"hidden\": false,\n                \"icon\": \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\Windows Terminal Icons\\\\icons8-ubuntu-96-white.png\",\n                \"name\": \"Ubuntu\",\n                \"source\": \"CanonicalGroupLimited.Ubuntu_79rhkp1fndgsc\"\n            }\n        ]\n    },\n    \"schemes\": \n    [\n        {\n            \"background\": \"#022A33\",\n            \"black\": \"#0C0C0C\",\n            \"blue\": \"#0037DA\",\n            \"brightBlack\": \"#767676\",\n            \"brightBlue\": \"#3B78FF\",\n            \"brightCyan\": \"#61D6D6\",\n            \"brightGreen\": \"#16C60C\",\n            \"brightPurple\": \"#B4009E\",\n            \"brightRed\": \"#E74856\",\n            \"brightWhite\": \"#F2F2F2\",\n            \"brightYellow\": \"#F9F1A5\",\n            \"cursorColor\": \"#FFFFFF\",\n            \"cyan\": \"#3A96DD\",\n            \"foreground\": \"#FFFFFF\",\n            \"green\": \"#13A10E\",\n            \"name\": \"JB\",\n            \"purple\": \"#881798\",\n            \"red\": \"#C50F1F\",\n            \"selectionBackground\": \"#FFFFFF\",\n            \"white\": \"#CCCCCC\",\n            \"yellow\": \"#C19C00\"\n        }\n    ],\n    \"themes\": [],\n    \"useAcrylicInTabRow\": false\n}\n</code></pre> <p>Download the settings.json example file.</p> <p>You can set the individual shell icons. In the example config file you see what Icons I suggest, but feel free to download whatever you want.</p> <p>Download icons.</p>"},{"location":"tech/windows-terminal/#starship","title":"Starship","text":"<p>You can install Starship to get the most out of Windows Terminal by styling your command prompts with colors, fonts, symbols and more.</p>"},{"location":"tech/docker-containers/glances/","title":"Glances","text":"<p>Glances is a monitoring tool that allows real-time monitoring of various aspects of your system such as CPU, memory, disk, network usage, running processes, logged in users, temperatures, voltages, fan speeds etc.</p> <p></p>"},{"location":"tech/docker-containers/glances/#resources","title":"Resources","text":"<ul> <li>GitHub</li> <li>Official Documentation</li> </ul>"},{"location":"tech/docker-containers/glances/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>glances/</code>. <code>cd</code> into it and create the file <code>docker-compose.yml</code>.</p> <p>For instructions on how to use Glances as a widget on Homepage, please see Setup on Homepage (To do...)</p>"},{"location":"tech/docker-containers/glances/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  glances:\n    container_name: glances\n    image: nicolargo/glances:4.1.2.1-full\n    restart: unless-stopped\n    ports:\n      - 61208:61208\n    environment:\n      - TZ=Europe/Stockholm\n      - GLANCES_OPT=-w # Glances option to run as a web server\n    pid: host # Use the host's PID namespace\n    volumes:\n      # Docker socket for monitoring\n      - /var/run/docker.sock:/var/run/docker.sock:ro \n</code></pre>"},{"location":"tech/docker-containers/glances/#configuration","title":"Configuration","text":"<ul> <li>Ports -   Select an avaliable port for the UI.</li> <li> <p>Environment</p> <ul> <li><code>TZ</code> - Set your local timezone.</li> <li><code>GLANCES_OPT=-w</code>: Run Glances as a webserver.</li> </ul> </li> <li> <p>PID - <code>pid: host</code>: Use the host's PID namespace</p> </li> </ul>"},{"location":"tech/docker-containers/glances/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/glances/#login","title":"Login","text":"<p>UI: http://server-ip:61208</p>"},{"location":"tech/docker-containers/glances/#api","title":"API","text":"<p>To check if the IP works, you can run this code:</p> <pre><code>curl http://server-ip:61208/api/4/status\n</code></pre> <p>You should then get a JSON response like:</p> <pre><code>{\"version\":\"4.1.2\"}\n</code></pre> <p>Refer to the documentation for what requests are available.</p>"},{"location":"tech/docker-containers/hoarder/","title":"Hoarder","text":"<p>Save websites for later in Hoarder instead of saving them as open tabs in the browser.</p> <p></p>"},{"location":"tech/docker-containers/hoarder/#resources","title":"Resources","text":"<ul> <li>https://hoarder.app/</li> <li>https://github.com/hoarder-app/hoarder</li> </ul>"},{"location":"tech/docker-containers/hoarder/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>hoarder/</code>. <code>cd</code> into it and create the files <code>docker-compose.yml</code> and  <code>.env</code>.</p>"},{"location":"tech/docker-containers/hoarder/#env","title":".env","text":"<p>You must create two secrets that will be used in your <code>.env</code> file. Run this command (two times) to create a secret:</p> <pre><code>openssl rand -base64 36\n</code></pre> <pre><code>HOARDER_VERSION=release\nNEXTAUTH_SECRET=YourNextauthSecret\nMEILI_MASTER_KEY=YourMeiliSecret\nNEXTAUTH_URL=http://localhost:3000\n</code></pre>"},{"location":"tech/docker-containers/hoarder/#configuration","title":"Configuration","text":"<ul> <li>NEXTAUTH_URL - The URL you will use for logging in. If you change this port you must also change the port under <code>ports</code> in the <code>docker-compose.yml</code> file.</li> </ul>"},{"location":"tech/docker-containers/hoarder/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  web:\n    image: ghcr.io/hoarder-app/hoarder:${HOARDER_VERSION:-release}\n    restart: unless-stopped\n    volumes:\n      - data:/data\n    ports:\n      - 3000:3000\n    env_file:\n      - .env\n    environment:\n      MEILI_ADDR: http://meilisearch:7700\n      BROWSER_WEB_URL: http://chrome:9222\n      # OPENAI_API_KEY: ...\n      DATA_DIR: /data\n\n  chrome:\n    image: gcr.io/zenika-hub/alpine-chrome:123\n    restart: unless-stopped\n    command:\n      - --no-sandbox\n      - --disable-gpu\n      - --disable-dev-shm-usage\n      - --remote-debugging-address=0.0.0.0\n      - --remote-debugging-port=9222\n      - --hide-scrollbars\n\n  meilisearch:\n    image: getmeili/meilisearch:v1.11.1\n    restart: unless-stopped\n    env_file:\n      - .env\n    environment:\n      MEILI_NO_ANALYTICS: \"true\"\n    volumes:\n      - meilisearch:/meili_data\n\nvolumes:\n  meilisearch:\n  data:\n</code></pre>"},{"location":"tech/docker-containers/hoarder/#configuration_1","title":"Configuration","text":"<ul> <li>Ports - Select an avaliable port for the UI. If you change this port, you must also change the port in the <code>.env</code> file.</li> <li>OPENAI_API_KEY - If you have an API key from OpenAI and want to use AI in hoarder, you enter the API key here.</li> </ul>"},{"location":"tech/docker-containers/hoarder/#portainer","title":"Portainer","text":"<p>If you are using Portainer, you can not use the <code>.env</code> file as intended since it's not loaded when the stack is created.</p> <p>Add the secrets variables <code>NEXTAUTH_SECRET</code> and <code>MEILI_MASTER_KEY</code> to the <code>docker-compose.yml</code> file and remove them from the <code>.env</code> file. Also, remove the variables <code>env_file</code> from the two services.</p> <pre><code>services:\n  web:\n    environment:\n      NEXTAUTH_SECRET: YourNextauthSecret\n\n  meilisearch:\n    environment:\n      MEILI_MASTER_KEY: YourMeiliSecret\n</code></pre> <p>When creating the stack in Portainer, either import the <code>.env</code> file with the two remaining variables by clicking Load variables from .env file or enter them manually by clicking Add an environment variable .</p> <p>Note that if you do this, the variables will be visible in the Portainer UI which could be a security risk.</p>"},{"location":"tech/docker-containers/hoarder/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/hoarder/#login","title":"Login","text":"<p>UI: http://server-ip:3000</p> <p>Create a user account when you log in the first time.</p>"},{"location":"tech/docker-containers/hoarder/#browser-extension","title":"Browser extension","text":"<p>There are extensions for Google Chrome and Firefox:</p> <ul> <li>Google Chrome</li> <li>Firefox</li> </ul> <p>You must type <code>http://</code> before the ip and port for the connection to work.</p> <p></p> <p>Firefox</p> <p>At the moment, the extension is not available for download from the Mozilla add-ons page. Use instead this version and install manually: Download (Github issue)</p>"},{"location":"tech/docker-containers/it-tools/","title":"IT-Tools","text":"<p>Useful tools for developer and people working in IT.</p> <p></p>"},{"location":"tech/docker-containers/it-tools/#resources","title":"Resources","text":"<ul> <li>https://github.com/CorentinTh/it-tools</li> </ul>"},{"location":"tech/docker-containers/it-tools/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>it-tools/</code>. <code>cd</code> into it and create the file <code>docker-compose.yml</code>.</p>"},{"location":"tech/docker-containers/it-tools/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  it-tools:\n    image: corentinth/it-tools:2024.10.22-7ca5933\n    container_name: it-tools\n    restart: unless-stopped\n    ports:\n      - 8080:80\n</code></pre>"},{"location":"tech/docker-containers/it-tools/#configuration","title":"Configuration","text":"<ul> <li>Ports -   Select an avaliable port for the UI.</li> </ul>"},{"location":"tech/docker-containers/it-tools/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/it-tools/#login","title":"Login","text":"<p>UI: http://server-ip:8080</p>"},{"location":"tech/docker-containers/leantime/","title":"Leantime","text":"<p>Leantime is a project management tool.</p> <p></p> <p>Portainer</p> <p>Leantime can't be started using a Portainer stack since it needs a .env file on startup.</p>"},{"location":"tech/docker-containers/leantime/#resources","title":"Resources","text":"<ul> <li>https://leantime.io</li> <li>https://docs.leantime.io/installation/docker</li> </ul>"},{"location":"tech/docker-containers/leantime/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>leantime/</code>. <code>cd</code> into it and create the files <code>docker-compose.yml</code> and <code>.env</code>.</p>"},{"location":"tech/docker-containers/leantime/#environment-variables","title":"Environment variables","text":"<p>The application requires some environment variables to be set when running the docker compose command. These variables are set in a .env file that must be created before hand. </p> <p>The sample file can be found on the Leantime Github page: https://github.com/Leantime/docker-leantime/blob/master/sample.env.</p> Sample .env .env<pre><code># This is a sample configuration file with all possible configuration options.\n# If you don't want to maintain a file like this you can pass in all variables via Server Variables\n\n## Minimum Configuration, these are required for installation\n\nLEAN_PORT = '8081'                                 # The port to expose and access Leantime\nLEAN_APP_URL = ''                                  # Base URL, needed for subfolder or proxy installs (including http:// or https://)\nLEAN_APP_DIR = ''                                  # Base of application without trailing slash (used for cookies), e.g, /leantime\n\nLEAN_DEBUG = 0                                     # Debug flag\n\n# Database - MySQL container\nMYSQL_ROOT_PASSWORD = 'changeme123'                # MySQL root password\nMYSQL_DATABASE = 'leantime'                        # Database name\nMYSQL_USER = 'lean'                                # Database username\nMYSQL_PASSWORD = 'changeme123'                     # Database password\n\n# Database - leantime container\nLEAN_DB_HOST = 'mysql_leantime'                    # Database host \nLEAN_DB_USER = 'lean'                              # Database username (needs to be the same as MYSQL_USER)\nLEAN_DB_PASSWORD = 'changeme123'                   # Database password (needs to be the same as MYSQL_PASSWORD)\nLEAN_DB_DATABASE = 'leantime'                      # Database name (needs to be the same as MYSQL_DATABASE)\nLEAN_DB_PORT = '3306'                              # Database port\n\n\n## Optional Configuration, you may omit these from your .env file\n\n## Default Settings\nLEAN_SITENAME = 'Leantime'                         # Name of your site, can be changed later\nLEAN_LANGUAGE = 'en-US'                            # Default language\nLEAN_DEFAULT_TIMEZONE = 'America/Los_Angeles'      # Set default timezone\nLEAN_LOG_PATH = ''                                 # Default Log Path (including filename), if not set /logs/error.log will be used\nLEAN_DISABLE_LOGIN_FORM = false                    # If true then don't show the login form (useful only if additional auth method[s] are available)\n\n## Session Management\nLEAN_SESSION_PASSWORD = '3evBlq9zdUEuzKvVJHWWx3QzsQhturBApxwcws2m'  # Salting sessions, replace with a strong password\nLEAN_SESSION_EXPIRATION = 28800                    # How many seconds after inactivity should we logout?  28800seconds = 8hours\nLEAN_SESSION_SECURE = false                        # Cookies only served via https\n\n## Look &amp; Feel, these settings are available in the UI and can be overwritten there.\nLEAN_LOGO_PATH = '/dist/images/logo.svg'           # Default logo path, can be changed later\nLEAN_PRINT_LOGO_URL = '/dist/images/logo.png'      # Default logo URL use for printing (must be jpg or png format)\nLEAN_DEFAULT_THEME = 'default'                     # Default theme\nLEAN_PRIMARY_COLOR = '#006d9f'                     # Primary Theme color\nLEAN_SECONDARY_COLOR =' #00a886'                   # Secondary Theme Color\n\n\n## Fileuploads\n\n# Local File Uploads\nLEAN_USER_FILE_PATH = 'userfiles/'                 # Local relative path to store uploaded files (if not using S3)\nLEAN_DB_BACKUP_PATH = 'backupdb/'                  # Local relative path to store backup files, need permission to write\n\n# S3 File Uploads\nLEAN_USE_S3 = false                                # Set to true if you want to use S3 instead of local files\nLEAN_S3_KEY = ''                                   # S3 Key\nLEAN_S3_SECRET = ''                                # S3 Secret\nLEAN_S3_BUCKET = ''                                # Your S3 bucket\nLEAN_S3_USE_PATH_STYLE_ENDPOINT = false            # Sets the endpoint style: false =&gt; https://[bucket].[endpoint] ; true =&gt; https://[endpoint]/[bucket]\nLEAN_S3_REGION = ''                                # S3 region\nLEAN_S3_FOLDER_NAME = ''                           # Foldername within S3 (can be empty)\nLEAN_S3_END_POINT = null                           # S3 EndPoint S3 Compatible (https://sfo2.digitaloceanspaces.com)\n\n## Email\nLEAN_EMAIL_RETURN = ''                             # Return email address, needs to be valid email address format\nLEAN_EMAIL_USE_SMTP = false                        # Use SMTP? If set to false, the default php mail() function will be used\nLEAN_EMAIL_SMTP_HOSTS = ''                         # SMTP host\nLEAN_EMAIL_SMTP_AUTH = true                        # SMTP authentication required\nLEAN_EMAIL_SMTP_USERNAME = ''                      # SMTP username\nLEAN_EMAIL_SMTP_PASSWORD = ''                      # SMTP password\nLEAN_EMAIL_SMTP_AUTO_TLS = true                    # SMTP Enable TLS encryption automatically if a server supports it\nLEAN_EMAIL_SMTP_SECURE = ''                        # SMTP Security protocol (usually one of: TLS, SSL, STARTTLS)\nLEAN_EMAIL_SMTP_SSLNOVERIFY = false                # SMTP Allow insecure SSL: Don't verify certificate, accept self-signed, etc.\nLEAN_EMAIL_SMTP_PORT = ''                          # Port (usually one of 25, 465, 587, 2526)\n\n## LDAP\nLEAN_LDAP_USE_LDAP = false                         # Set to true if you want to use LDAP\nLEAN_LDAP_LDAP_DOMAIN = ''                         # Domain name after username@ so users can login without domain definition\nLEAN_LDAP_LDAP_TYPE = 'OL'                         # Select the correct directory type. Currently Supported: OL - OpenLdap, AD - Active Directory\nLEAN_LDAP_HOST = ''                                # FQDN\nLEAN_LDAP_PORT = 389                               # Default Port\nLEAN_LDAP_URI = ''                                 # LDAP URI as alternative to hostname and port. Uses ldap://hostname:port\nLEAN_LDAP_DN = ''                                  # Location of users, example: CN=users,DC=example,DC=com\n                                                  # Leantime-&gt;Ldap attribute mapping\nLEAN_LDAP_KEYS=\"{\n        \\\"username\\\":\\\"uid\\\",\n        \\\"groups\\\":\\\"memberOf\\\",\n        \\\"email\\\":\\\"mail\\\",\n        \\\"firstname\\\":\\\"displayname\\\",\n        \\\"lastname\\\":\\\"\\\",\n        \\\"phone\\\":\\\"telephoneNumber\\\",\n        \\\"jobTitle\\\":\\\"title\\\"\n        \\\"jobLevel\\\":\\\"level\\\"\n        \\\"department\\\":\\\"department\\\"\n\n}\"\n\n# For AD use these default attributes\n# LEAN_LDAP_KEYS=\"{\n#        \\\"username\\\":\\\"cn\\\",\n#        \\\"groups\\\":\\\"memberOf\\\",\n#        \\\"email\\\":\\\"mail\\\",\n#        \\\"firstname\\\":\\\"givenName\\\",\n#        \\\"lastname\\\":\\\"sn\\\",\n#        \\\"phone\\\":\\\"telephoneNumber\\\",\n#        \\\"jobTitle\\\":\\\"title\\\"\n#        \\\"jobLevel\\\":\\\"level\\\"\n#        \\\"department\\\":\\\"department\\\"\n#      }\"\n\nLEAN_LDAP_DEFAULT_ROLE_KEY = 20;                   # Default Leantime Role on creation. (set to editor)\n\n# Default role assignments upon first login.\n# optional - Can be updated later in user settings for each user\nLEAN_LDAP_GROUP_ASSIGNMENT=\"{\n              \\\"5\\\": {\n                \\\"ltRole\\\":\\\"readonly\\\",\n                \\\"ldapRole\\\":\\\"readonly\\\"\n              },\n              \\\"10\\\": {\n                \\\"ltRole\\\":\\\"commenter\\\",\n                  \\\"ldapRole\\\":\\\"commenter\\\"\n              },\n              \\\"20\\\": {\n                \\\"ltRole\\\":\\\"editor\\\",\n                  \\\"ldapRole\\\":\\\"editor\\\"\n              },\n              \\\"30\\\": {\n                \\\"ltRole\\\":\\\"manager\\\",\n                  \\\"ldapRole\\\":\\\"manager\\\"\n              },\n              \\\"40\\\": {\n                \\\"ltRole\\\":\\\"admin\\\",\n                  \\\"ldapRole\\\":\\\"administrators\\\"\n              },\n              \\\"50\\\": {\n                \\\"ltRole\\\":\\\"owner\\\",\n                \\\"ldapRole\\\":\\\"administrators\\\"\n              }\n}\"\n\n## OpenID Connect\n# required\nLEAN_OIDC_ENABLE = false\nLEAN_OIDC_CLIENT_ID =\nLEAN_OIDC_CLIENT_SECRET =\n\n# required - the URL for your provider (examples down below)\n#LEAN_OIDC_PROVIDER_URL =\n\n#Create User if it doesn't exist in Leantime db, otherwise fail login\nLEAN_OIDC_CREATE_USER = false\n\n# Default role for users created via OIDC (20 is editor)\nLEAN_OIDC_DEFAULT_ROLE = 20\n\n# optional - these will be read from the well-known configuration if possible\n#LEAN_OIDC_AUTH_URL_OVERRIDE =\n#LEAN_OIDC_TOKEN_URL_OVERRIDE =\n#LEAN_OIDC_JWKS_URL_OVERRIDE =\n#LEAN_OIDC_USERINFO_URL_OVERRIDE =\n\n# optional - override the public key for RSA validation\n#LEAN_OIDC_CERTIFICATE_STRING =\n#LEAN_OIDC_CERTIFICATE_FILE =\n\n# optional - override the requested scopes\n#LEAN_OIDC_SCOPES =\n\n# optional - override the keys used for these fields\n#LEAN_OIDC_FIELD_EMAIL =\n#LEAN_OIDC_FIELD_FIRSTNAME =\n#LEAN_OIDC_FIELD_LASTNAME =\n#LEAN_OIDC_FIELD_PHONE =\n#LEAN_OIDC_FIELD_JOBTITLE =\n#LEAN_OIDC_FIELD_JOBLEVEL=\n#LEAN_OIDC_FIELD_DEPARTMENT =\n\n## OpenID Connect setting for GitHub\n#LEAN_OIDC_PROVIDER_URL = https://token.actions.githubusercontent.com/\n#LEAN_OIDC_AUTH_URL_OVERRIDE = https://github.com/login/oauth/authorize\n#LEAN_OIDC_TOKEN_URL_OVERRIDE = https://github.com/login/oauth/access_token\n#LEAN_OIDC_USERINFO_URL_OVERRIDE = https://api.github.com/user,https://api.github.com/user/emails\n#LEAN_OIDC_SCOPES = user:email,read:user\n#LEAN_OIDC_FIELD_EMAIL = 0.email\n#LEAN_OIDC_FIELD_FIRSTNAME = name\n\n\n## Redis (for session storage and cache)\nLEAN_USE_REDIS = false                             # Set to true to use redis as session cache\nLEAN_REDIS_URL = ''                                # Add URL path such as tcp://1.2.3.4:6379. If you are using a password, add ?auth=yourverycomplexpasswordhere to your URL\nLEAN_REDIS_HOST = ''\nLEAN_REDIS_PORT = 6379\nLEAN_REDIS_PASSWORD = ''\nLEAN_REDIS_SCHEME = ''\n\n## Rate limiting\nLEAN_RATELIMIT_GENERAL = 1000\nLEAN_RATELIMIT_API = 10\nLEAN_RATELIMIT_AUTH = 20\n</code></pre>"},{"location":"tech/docker-containers/leantime/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  leantime_db:\n    image: mysql:8.4\n    container_name: mysql_leantime\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: unless-stopped\n    env_file: ./.env\n    networks:\n      - leantime-net\n    command: --character-set-server=UTF8MB4 --collation-server=UTF8MB4_unicode_ci\n\n  leantime:\n    image: leantime/leantime:latest\n    container_name: leantime\n    restart: unless-stopped\n    env_file: ./.env\n    networks:\n      - leantime-net\n    volumes:\n      - public_userfiles:/var/www/html/public/userfiles\n      - userfiles:/var/www/html/userfiles\n      - plugins:/var/www/html/app/Plugins\n    ports:\n      - \"${LEAN_PORT}:80\"\n    depends_on:\n      - leantime_db\n\nvolumes:\n  db_data:\n  userfiles:\n  public_userfiles:\n  plugins:\n\nnetworks:\n  leantime-net:\n</code></pre>"},{"location":"tech/docker-containers/leantime/#configuration","title":"Configuration","text":"<ul> <li>env_file - Path to the .env file.</li> <li>Ports - Default port for the UI is <code>8081</code>.</li> </ul>"},{"location":"tech/docker-containers/leantime/#deploy-the-container","title":"Deploy the container","text":"<p>Since Leantime requires the .env file to exist before running Docker Compose, it can't be started using a Portainer stack.</p> <p>Run the Docker Compose file in the terminal:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/leantime/#setup","title":"Setup","text":"<p>Start the application setup by going to the URL:</p> <p>Setup: http://server-ip:8081/install</p>"},{"location":"tech/docker-containers/leantime/#login","title":"Login","text":"<p>UI: http://server-ip:8081</p>"},{"location":"tech/docker-containers/linkstack/","title":"LinkStack","text":"<p>LinkStack is a link sharing platform that is a free and open-source alternative to Linktree.</p> <p></p>"},{"location":"tech/docker-containers/linkstack/#resources","title":"Resources","text":"<ul> <li>LinkStack documentation</li> </ul>"},{"location":"tech/docker-containers/linkstack/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>linkstack/</code>. <code>cd</code> into it and create the file <code>docker-compose.yml</code>.</p>"},{"location":"tech/docker-containers/linkstack/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  linkstack:\n    image: linkstackorg/linkstack:latest\n    container_name: linkstack\n    hostname: linkstack\n    restart: unless-stopped\n    ports:\n      - 80:80\n      - 443:443\n    environment:\n      - HTTP_SERVER_NAME=example.com # Optional\n      - HTTPS_SERVER_NAME=example.com # Optional\n      - SERVER_ADMIN=email@example.com\n      - TZ=Euprope/Stockholm\n      - PHP_MEMORY_LIMIT=512M\n      - UPLOAD_MAX_FILESIZE=8M\n    volumes:\n      - htdocs:/htdocs\n\nvolumes:\n  htdocs:\n</code></pre>"},{"location":"tech/docker-containers/linkstack/#configuration","title":"Configuration","text":"<ul> <li>Ports - Select avaliable ports for the UI.</li> <li> <p>Environment</p> <ul> <li><code>TZ</code> - Set your local timezone.</li> <li><code>SERVER_ADMIN</code> - Set the email address for ther server admin.</li> </ul> </li> </ul>"},{"location":"tech/docker-containers/linkstack/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/linkstack/#login","title":"Login","text":"<p>UI: https://server-ip:443/login</p>"},{"location":"tech/docker-containers/linkstack/#setup","title":"Setup","text":"<p>Go to the UI and run the setup. </p> <ul> <li>Use SQLite as database.</li> <li>Create an admin account and make some final settings.</li> </ul>"},{"location":"tech/docker-containers/linkstack/#themes","title":"Themes","text":"<p>Download themes from https://linkstack.org/themes/ and upload them via the UI.</p>"},{"location":"tech/docker-containers/material-for-mkdocs/","title":"Material for MkDocs","text":"<p>Material for MkDocs is a documentation framework made for MkDocs and is build with Python. It offers a lot of functionallity and customization to you project as well as easy deployment to Docker, GitHub Pages and GitLab Pages.</p> <p></p> <p>Instructions on how to use and setup a local development environment.</p>"},{"location":"tech/docker-containers/material-for-mkdocs/#resources","title":"Resources","text":"<ul> <li>Material for MkDocs documentation</li> </ul>"},{"location":"tech/docker-containers/material-for-mkdocs/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>my-site/</code>. <code>cd</code> into it and create the files <code>docker-compose.yml</code>, <code>Dockerfile</code>, <code>mkdocs.yml</code> and the folder <code>docs/</code>.</p> <p>If you will be running Docker on WSL2 on Windows and use that as your server, the\u00a0<code>my-site/</code>\u00a0folder can be created where it is appropriate, for instance:\u00a0<code>C:\\prod\\my-site</code>.</p> <p>To make the site load when the service is running you have to add at least this code to the <code>mkdocs.yml</code> file:</p> mkdocs.yml<pre><code>site_name: My Site\nsite_url: https://mydomain.org/mysite\ntheme:\n  name: material\n</code></pre>"},{"location":"tech/docker-containers/material-for-mkdocs/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  mkdocs:\n    image: squidfunk/mkdocs-material\n    container_name: my-site\n    restart: unless-stopped\n    ports:\n      - 8000:8000\n    volumes:\n      - ./:/docs\n    stdin_open: true\n    tty: true\n</code></pre>"},{"location":"tech/docker-containers/material-for-mkdocs/#configuration","title":"Configuration","text":"<ul> <li> <p>Ports -   Select an avaliable port for the website.</p> </li> <li> <p>Volumes - Since the container needs the <code>mkdocs.yml</code> file to run, we have to create that file before we deploy the container. This means that we can't use named volumes.</p> <p>Portainer</p> <p>If you use Portainer, you will have to point to where your <code>my-site/</code> folder is located on your system. </p> <ul> <li>Mount a Windows folder to a Docker Container</li> <li>Mount a Linux folder to a Docker Container (To do...)</li> </ul> Windows example<pre><code>volumes:\n  - /c/prod/my-site:/docs\n</code></pre> </li> </ul>"},{"location":"tech/docker-containers/material-for-mkdocs/#plugins-dockerfile","title":"Plugins / Dockerfile","text":"<p>If you need to install plugins, you add them in the <code>Dockerfile</code> and then build the project before deploying to the container. Read more in the official documentation.</p> Dockerfile<pre><code>FROM squidfunk/mkdocs-material\nRUN pip install mkdocs-glightbox\n</code></pre> <p>Build:</p> <pre><code>docker build -t squidfunk/mkdocs-material .\n</code></pre>"},{"location":"tech/docker-containers/material-for-mkdocs/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/tududi/","title":"Tududi","text":"<p>Simple project managgement and todo app. Tududi is a currently a single user only application.</p> <p></p>"},{"location":"tech/docker-containers/tududi/#resources","title":"Resources","text":"<ul> <li>https://github.com/chrisvel/tududi</li> </ul>"},{"location":"tech/docker-containers/tududi/#prerequisites","title":"Prerequisites","text":"<p>In the server root directory, create a folder called <code>tududi/</code>. <code>cd</code> into it and create the file <code>docker-compose.yml</code>.</p>"},{"location":"tech/docker-containers/tududi/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>---\nservices:\n  tududi:\n    image: chrisvel/tududi:latest\n    container_name: tududi\n    restart: unless-stopped\n    ports:\n      - 9292:9292\n    volumes:\n      - db:/usr/src/app/tududi_db\n    environment:\n      - TUDUDI_INTERNAL_SSL_ENABLED=false\n      - TUDUDI_SESSION_SECRET=your_generated_hash_here\n      - TUDUDI_USER_PASSWORD=mysecurepassword\n      - TUDUDI_USER_EMAIL=myemail@example.com\n\nvolumes:\n  db:\n</code></pre>"},{"location":"tech/docker-containers/tududi/#configuration","title":"Configuration","text":"<ul> <li>Ports - Select an avaliable port for the UI.</li> <li> <p>Environment</p> <ul> <li><code>TUDUDI_INTERNAL_SSL_ENABLED</code> - Set to <code>true</code> if you will use a reverse proxy with an SSL certificate.</li> <li> <p><code>TUDUDI_SESSION_SECRET</code> - Generate a hash using:</p> <pre><code>openssl rand -hex 64\n</code></pre> </li> <li> <p><code>TUDUDI_USER_PASSWORD</code> - Your login password</p> </li> <li><code>TUDUDI_USER_EMAIL</code> - Your login email</li> </ul> </li> </ul>"},{"location":"tech/docker-containers/tududi/#nginx-proxy-manager","title":"Nginx Proxy Manager","text":"<p>If you are using Nginx Proxy Manager with a SSL certificate, select scheme <code>https</code>.</p>"},{"location":"tech/docker-containers/tududi/#deploy-the-container","title":"Deploy the container","text":"<p>Run the Docker Compose file as a stack in Portainer or with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"tech/docker-containers/tududi/#login","title":"Login","text":"<p>UI: http://server-ip:9292</p>"},{"location":"tech/git-and-github/","title":"Git and GitHub","text":"<p>This page will go through some basic commands and applications for Git and use examples for work with GitHub. Git can however be used with multiple different plaforms for hosting your content, like Gitlab and Azure DevOps.</p>"},{"location":"tech/git-and-github/#prerequites","title":"Prerequites","text":"<p>Create an account on GitHub and sign in.</p>"},{"location":"tech/git-and-github/#cheet-sheet","title":"Cheet sheet","text":"Command Explanation <code>git add .</code> Prepare all files for commit <code>git reset</code> Remove files from commit <code>git commit -m \"message\"</code> Commit the files <code>git branch feature</code> Create a branch named feature <code>git checkout feature</code> Open the branch feature <code>git branch -d feature</code> Delete the local branch feature <code>git push -u origin feature</code> Push to remote repo (first time) <code>git push</code> Push to remote repo <code>git config --list</code> List all config settings <code>git config user</code> View user details <code>git config user.name \"&lt;NAME&gt;\"</code> Set user name <code>git config user.email \"&lt;EMAIL&gt;\"</code> Set user email <p>Add the option <code>--global</code> to <code>git config</code> to set or view the global values. If the <code>--global</code> option is not selected, the information will only be project specific.</p> <pre><code>git config --global user\ngit config --global user.name \"&lt;NAME&gt;\"\ngit config --global user.email \"&lt;EMAIL&gt;\"\n</code></pre>"},{"location":"tech/git-and-github/#installation","title":"Installation","text":"<p>Check if you have Git installed by running <code>git -v</code> in the terminal. Git is already installed if a version is returned.</p> <pre><code>git -v\n</code></pre>"},{"location":"tech/git-and-github/#windows","title":"Windows","text":"<ol> <li> <p>Download Git from the official website. </p> </li> <li> <p>Run the .exe file and follow the installation prompts. See some important steps below.</p> </li> <li> <p>Add a Git Bash profile to your terminal (optional).</p> <p></p> </li> <li> <p>Select a default editor.</p> <p></p> </li> <li> <p>Select if you want <code>master</code> to be the default branch or if you want something else, like <code>main</code>.</p> <p></p> </li> <li> <p>Keep the default settings for the following prompts and finish with Install.</p> </li> </ol>"},{"location":"tech/git-and-github/#linux","title":"Linux","text":"<p>Comming soon...</p>"},{"location":"tech/git-and-github/#start-a-new-project","title":"Start a new project","text":"<ol> <li> <p>Create a new project or repository on GitHub.</p> </li> <li> <p>Open the root folder of your local project in the terminal. You will then create a new Git instance for that project.</p> <pre><code>git init\n</code></pre> <p>A hidden <code>.git</code> folder has now been created in your project that is now treated as a local repository with it's own master branch. The folder contains config files and Git data.</p> </li> <li> <p>Connect the remote repository to your local repository.</p> <pre><code>git remote add origin https://github.com/&lt;USERNAME&gt;/&lt;REPO_NAME&gt;.git\n</code></pre> <p>Change <code>&lt;USERNAME&gt;</code> to your GitHub username and <code>&lt;REPO_NAME&gt;</code> to the name of your repository. You can also get the address from GitHub.</p> <p></p> <p>If this is the first time you connect to your local repository, you will have to log in to your GitHub account via the window that will appear.</p> </li> <li> <p>Check the status of you project. If you already have files in your project there should be alot of \"untracked\" files.</p> <pre><code>git status\n</code></pre> <p>If you don't have any files in your project, create a file called <code>README.md</code> in the project root and push that to the repository. If you later want to push your code to a new branch in the repository, you must first push something to the master branch as it can't be empty.</p> Example file README.md<pre><code># My project\n\nThis is a README file.\n</code></pre> </li> <li> <p>Add all of the files to the staging area where they are prepared for the commit.</p> <pre><code>git add .\n</code></pre> </li> <li> <p>Commit the code with a short comment that describes what code we are pushing or why.</p> <pre><code>git commit -m \"First commit\"\n</code></pre> </li> <li> <p>You can now push your code to the remote repository on GitHub for example. The command below will push your code to the master branch.</p> <pre><code>git push -u origin master\n</code></pre> <p>Push to another branch</p> <p>The master branch must have content before you can push to another branch - it can't be empty. As long as the master branch is not empty, you can push like normal:</p> <pre><code>git push -u origin dev\n</code></pre> <p>After the first push, you don't have to specify the origin:</p> <pre><code>git push\n</code></pre> </li> </ol> <p>Your code has now been pushed to GitHub</p>"},{"location":"tech/git-and-github/#cloning","title":"Cloning","text":"<p>To clone a repo, you need the url to the repo:</p> <pre><code>git clone &lt;url&gt;\n</code></pre> <pre><code>git clone https://github.com/jonasbirkelof/beets-php\n</code></pre> <p>To clone a specific branch from the project, you add the branch flag:</p> <pre><code>git clone &lt;url&gt; -b &lt;branch&gt; --single-branch [&lt;folder&gt;]\n</code></pre> <pre><code>git clone https://github.com/jonasbirkelof/beets-php -b dev --single-branch\n</code></pre>"},{"location":"tech/git-and-github/#branches","title":"Branches","text":"<p>Using branches is helpful when you want to edit your code without your main or production being affected before you are done. For example, if you want to create a new feature, you will create a feature branch, push your code to that branch and when you are done you will make a \"pull request\" and merge your code in the feature branch with the code in your master branch.</p> <p>These steps will assume that you only have a master branch in your repository.</p> <ol> <li> <p>Create a new branch.</p> <pre><code>git branch feature\n</code></pre> </li> <li> <p>Checkout the new branch.</p> <pre><code>git checkout feature\n</code></pre> </li> <li> <p>Check that you have changed branch.</p> <pre><code>git branch\n</code></pre> <p>The one with the * asterisk is the one that is checked out.</p> <p>To list the remote branches as well, add the <code>-a</code> option.</p> <pre><code>git branch -a\n</code></pre> </li> <li> <p>Commit your code like usual and then push to the remote repository.</p> <pre><code>git push -u origin feature\n</code></pre> <p>After the first push, you don't have to specify the origin:</p> <pre><code>git push\n</code></pre> </li> </ol> <p>Your code has now been pushed to GitHub to the feature branch</p>"},{"location":"tech/git-and-github/#workflows-for-branches","title":"Workflows for branches","text":"<p>Learn more about working with branches in this blog post: Workflows for Git branches</p>"},{"location":"tech/git-and-github/#make-a-pull-request","title":"Make a pull request","text":"<p>When you are done working on a branch for e.g. a new feature, you will want to merge that code to a branch for an upcomming releas or the master branch. You do this by first making a pull request that will check your new code if there are any conflicts with the existing code and then merge them.</p> <p>These steps will assume that you have pushed a feature branch to GitHub and that you want to merge it with a branch called 1.0.0 that is the branch for an upcomming release that will later be merged with the master branch when it is complete.</p> <ol> <li> <p>Click on Compare &amp; pull request or go to the Pull requests tab and create it from there.</p> <p></p> </li> <li> <p>Fill out the form for the pull request.</p> <p>Target branch</p> <p>Make sure that the base branch is set to 1.0.0 and that compare is set to feature. This will merge the feature branch with the 1.0.0 branch.</p> <p></p> <ul> <li> <p>Title: The title originates from the commit message but it can be changed to something appropriate. </p> <p>If you merge an upcomming version to master, set the title to Version 1.0.0.</p> </li> <li> <p>Description: Add a description of what your new code will accomplish or what you have fixed.</p> </li> </ul> </li> <li> <p>You can review the difference between the new and existing code at the bottom of the page.</p> </li> <li> <p>Click on Create pull request.</p> </li> <li> <p>GitHub will now check if there are any conflicts between the new and existing code.</p> <p></p> </li> <li> <p>Add a comment (optional).</p> </li> <li> <p>In the right hand column, you can select Reviewers, Lables and other options for the commit. Under Development you can select an issue if this pull request is related to one.</p> </li> <li> <p>Click on Merge pull request when you are done.</p> </li> <li> <p>Now you must name your merge. It can be the same thing as the title for the commit.</p> <p>Merge number</p> <p>Save the number for the merge (i.e. #123) and preferably put it in perentheses for better readability. The number will generate as a link to you merge in the title.</p> <p></p> <p>If you merge an upcomming version to master, set the title to Version 1.0.0 (#123).</p> </li> <li> <p>Click on Confirm merge.</p> </li> <li> <p>You can now delete the feature branch.</p> <p></p> </li> <li> <p>If you chose to attach an issue to your pull request in the previous step, you can now open the issue and mark it as done. Your pull request should have been added to the issue.</p> </li> </ol> <p>You are now done with your pull request</p>"},{"location":"tech/git-and-github/#reset-your-local-environment-after-a-pull-request","title":"Reset your local environment after a pull request","text":"<p>If you have created a feature branch from the master branch, pushed it to GitHub and then merged it with the master branch, your local master branch will be out of sync with the remote master branch since it does not contain the newly merged code from the feature branch.</p> <p>To resolve this we need to reset the local environment so that it matches the remote repository.</p> <ol> <li> <p>Checkout the master branch in your local project.</p> <pre><code>git checkout master\n</code></pre> </li> <li> <p>Pull the master branch from the remote repository.</p> <pre><code>git pull origin master\n</code></pre> </li> <li> <p>Reset the local branch</p> <pre><code>git reset --hard origin/master\n</code></pre> <p>This step will reset the local staging area and rewrite the local branch's history to match the remote branch.</p> </li> </ol> <p>Your local repository is now up to date</p>"},{"location":"tech/git-and-github/#make-a-release","title":"Make a release","text":"<p>When you push a new version of your code and want to make it easliy available for the community, it is a good idea to make a release. A release bunldes the source code from your repository for that specific time (like a snapshot) along with other files that you want to include, like binary versions of the project for different operating systems. You can also write a changelog so that the users can see what has changed from the previous version.</p> <ol> <li> <p>Click on Create a new release in the right hand column.</p> </li> <li> <p>Add the information for the release.</p> <ul> <li> <p>Tag: Create a tag for the new version of your code. The tag can be named 1.0.0 which is the semmantic version number.</p> <p></p> </li> <li> <p>Target: Select target as master. This will add the code that is in the master right now to the release as a zip-file. You can select a different branch if you for instance are making bug fixes for a legacy version that you keep in its own branch.</p> </li> <li> <p>Title: Make the title the same as the tag, but you can add a \"version\" prefix if you like (Version 1.0.0).</p> </li> <li> <p>Write: In the description you can write the information about this release, like the cange log or . </p> <p>Tip</p> <p>If you click on Generate release notes at the top of the page, release notes will automatically be added as markdown for you.</p> <p></p> </li> <li> <p>Attach addition files that you want include in your release.</p> </li> </ul> </li> <li> <p>Click on Publish release.</p> </li> </ol> <p>Since you created a tag (1.0.0) for the release, you can now view that tag using the same dropdown as for selecting branches. By selecting the tag you will view a snapshot of your source code from when the release was created, the same source code that was zipped and added to the release, along with its history.</p> <p></p> <p>You have now made a release</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/development/","title":"Development","text":""}]}